#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <175>;
    global-quick-tap;
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
};

&sk {
    quick-release;
    release-after-ms = <850>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <33 36>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <36 34>;
        };
    };

    macros {
        p_the: p_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "P_THE";
        };

        p_ing: p_ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp G &trans>;
            label = "P_ING";
        };

        p_and: p_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "P_AND";
        };

        p_ould: p_ould {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U &kp L &kp D>;
            label = "P_OULD";
        };

        p_have: p_have {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp A &kp V &kp E>;
            label = "P_HAVE";
        };

        p_all: p_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp L>;
            label = "P_ALL";
        };

        p_you: p_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp U>;
            label = "P_YOU";
        };

        p_ver: p_ver {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp E &kp R>;
            label = "P_VER";
        };

        p_because: p_because {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp E &kp C &kp A &kp U &kp S &kp E>;
            label = "P_BECAUSE";
        };

        p_for: p_for {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp O &kp R>;
            label = "P_FOR";
        };

        p_com: p_com {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp M>;
            label = "P_COM";
        };

        p_ill: p_ill {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp L &kp L>;
            label = "P_ILL";
        };

        p_ess: p_ess {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp S &kp S>;
            label = "P_ESS";
        };

        p_ound: p_ound {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U &kp N &kp D>;
            label = "P_OUND";
        };

        p_res: p_res {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E &kp S>;
            label = "P_RES";
        };

        p_tion: p_tion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp I &kp O &kp N>;
            label = "P_TION";
        };

        p_ight: p_ight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp G &kp H &kp T>;
            label = "P_IGHT";
        };

        p_space: p_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp SPACE>;
            label = "P_SPACE";
        };

        p_igh: p_igh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp G &kp H>;
            label = "P_IGH";
        };

        p_ion: p_ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp N>;
            label = "P_ION";
        };

        p_ive: p_ive {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp V &kp E>;
            label = "P_IVE";
        };

        p_ike: p_ike {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp K &kp E>;
            label = "P_IKE";
        };

        p_int: p_int {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp T>;
            label = "P_INT";
        };

        p_ist: p_ist {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp S &kp T>;
            label = "P_IST";
        };

        p_ith: p_ith {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp T &kp H>;
            label = "P_ITH";
        };
    };

    behaviors {
        ak_h: ak_h {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp H>;

            akt_ah {
                trigger-keys = <A>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };

            akt_eh {
                trigger-keys = <E>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };

            akt_ih {
                trigger-keys = <I>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };

            akt_oh {
                trigger-keys = <O>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };

            // These bi-grams aren't used much, so it could be swapped with U, but the 
            // benefit isn't there for the cognitive overhead.

            akt_ch {
                trigger-keys = <C>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };

            akt_sh {
                trigger-keys = <S>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };

            akt_th {
                trigger-keys = <T>;
                max-prior-idle-ms = <300>;
                bindings = <&kp N>;
            };
        };

        ak_n: ak_n {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp N>;

            akt_an {
                trigger-keys = <A>;
                max-prior-idle-ms = <300>;
                bindings = <&kp L>;
            };

            akt_en {
                trigger-keys = <E>;
                max-prior-idle-ms = <300>;
                bindings = <&kp L>;
            };

            akt_in {
                trigger-keys = <I>;
                max-prior-idle-ms = <300>;
                bindings = <&kp L>;
            };

            // Keep the OL roll as it originally is.

            akt_on {
                trigger-keys = <O>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };

            akt_cn {
                trigger-keys = <C>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };

            akt_sn {
                trigger-keys = <S>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };

            akt_tn {
                trigger-keys = <T>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };
        };

        ak_l: ak_l {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp L>;

            akt_al {
                trigger-keys = <A>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };

            akt_el {
                trigger-keys = <E>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };

            akt_il {
                trigger-keys = <I>;
                max-prior-idle-ms = <300>;
                bindings = <&kp H>;
            };
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
            &kp Y      &ak_l  &kp O                 &kp U               &kp PERIOD       &kp B            &kp P      &kp D                 &kp M  &kp F
            &kp I      &kp R  &kp A                 &ak_h               &kp Z            &kp G            &kp C      &kp T                 &ak_n  &kp S
&kp ESCAPE  &kp MINUS  &kp X  &mt LEFT_CONTROL SQT  &mt LEFT_ALT COMMA  &kp SEMICOLON    &kp V            &kp W      &kp K                 &kp Q  &kp J  &kp DELETE
                              &lt 2 BACKSPACE       &kp E               &to 1            &sk RIGHT_SHIFT  &kp SPACE  &mt LEFT_COMMAND TAB
            >;
        };

        Symbol {
            bindings = <
        &kp GRAVE        &kp AT_SIGN  &kp HASH               &kp DOLLAR         &kp PERIOD       &kp LCTRL    &kp N7             &mt UP_ARROW N8       &kp N9              &kp PLUS
        &kp EXCLAMATION  &kp EQUAL    &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp AMPERSAND    &kp PERCENT  &mt LEFT NUMBER_4  &mt DOWN N5           &mt RIGHT NUMBER_6  &kp ASTERISK
&trans  &trans           &trans       &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp SLASH        &trans       &kp NUMBER_1       &kp NUMBER_2          &kp NUMBER_3        &kp BACKSLASH  &trans
                                      &trans                 &kp UNDERSCORE     &to 0            &trans       &kp SPACE          &mt RIGHT_CONTROL N0
            >;
        };

        Poly {
            bindings = <
        &p_you   &p_ill  &p_ould  &p_ound  &trans    &p_because  &trans  &p_and  &trans   &p_for
        &p_ight  &p_res  &p_all   &p_have  &trans    &p_ing      &p_com  &p_the  &p_tion  &p_ess
&trans  &trans   &trans  &trans   &trans   &trans    &p_ver      &trans  &trans  &trans   &trans  &trans
                         &trans   &trans   &trans    &trans      &to 0   &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
        &trans       &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &bootloader  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans       &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                             &trans  &trans  &to 0     &trans  &to 0   &to 0
            >;
        };

        al_i {
            bindings = <
        &p_ing  &p_ing  &p_ing  &p_ing    &p_ing    &p_ing   &p_ing    &p_ing  &p_ing  &p_ing
        &p_ing  &p_ing  &p_ing  &p_ing    &p_ing      &p_ight  &p_ing    &p_ing  &p_ing  &p_ing
&p_ing  &p_ing  &p_ing  &p_ing  &p_ing  &p_ing      &p_ing   &p_ing    &p_ing  &p_ing  &p_ing  &p_ing
                        &to 0  &p_ing    &p_ing      &p_ing   &p_ing  &p_ing
            >;
        };
    };
};
